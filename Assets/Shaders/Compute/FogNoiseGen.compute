#pragma kernel CSMain

RWTexture3D<float2> Result;

RWStructuredBuffer<float3> MainPoints;
int MainPointCount;

RWStructuredBuffer<float3> DetailPoints;
int DetailPointCount;

float ValueDivisor;

[numthreads(8, 8, 8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	float3 pos = float3(id.x, id.y, id.z);

	float mainNoiseDist = 9999999999999999999.0;
	float detailNoiseDist = 9999999999999999999.0;
 
	for (int i = 0; i < MainPointCount; i++) {
		float dist = length(pos - MainPoints[i]);
		if (dist < mainNoiseDist) {
			mainNoiseDist = dist;
		}
	}

	for (int j = 0; j < DetailPointCount; j++) {
		float d = length(pos - DetailPoints[j]);
		if (d < detailNoiseDist) {
			detailNoiseDist = d;
		}
	}

	float mainNoise = (mainNoiseDist / ValueDivisor);
	float detailNoise = (detailNoiseDist / ValueDivisor);

	/* We layer a detail noise in the green channel. This allows both
	 * the main noise and the detail noise to be sampled at once. */
	Result[id.xyz] = float2(mainNoise, detailNoise);
}
